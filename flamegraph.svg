<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="3128322781"><g><title>[ld-linux-x86-64.so.2] (1,837,176 samples, 0.06%)</title><rect x="0.0000%" y="613" width="0.0587%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1837176"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,837,176 samples, 0.06%)</title><rect x="0.0000%" y="597" width="0.0587%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1837176"/><text x="0.2500%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,603,510 samples, 0.05%)</title><rect x="0.0075%" y="581" width="0.0513%" height="15" fill="rgb(221,193,54)" fg:x="233666" fg:w="1603510"/><text x="0.2575%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,858,808 samples, 0.06%)</title><rect x="0.0000%" y="629" width="0.0594%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1858808"/><text x="0.2500%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,860,234 samples, 0.06%)</title><rect x="0.0000%" y="645" width="0.0595%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1860234"/><text x="0.2500%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,860,235 samples, 0.06%)</title><rect x="0.0000%" y="661" width="0.0595%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1860235"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;ashtl::alg::poly::Poly&lt;_&gt; as core::clone::Clone&gt;::clone (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="389" width="0.2160%" height="15" fill="rgb(207,160,47)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="373" width="0.2160%" height="15" fill="rgb(228,23,34)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="357" width="0.2160%" height="15" fill="rgb(218,30,26)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="341" width="0.2160%" height="15" fill="rgb(220,122,19)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="325" width="0.2160%" height="15" fill="rgb(250,228,42)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="309" width="0.2160%" height="15" fill="rgb(240,193,28)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="319.50"></text></g><g><title>[libc.so.6] (6,757,367 samples, 0.22%)</title><rect x="0.0595%" y="293" width="0.2160%" height="15" fill="rgb(216,20,37)" fg:x="1860235" fg:w="6757367"/><text x="0.3095%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="389" width="0.2064%" height="15" fill="rgb(206,188,39)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="399.50"></text></g><g><title>core::ptr::write (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="373" width="0.2064%" height="15" fill="rgb(217,207,13)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="383.50"></text></g><g><title>[unknown] (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="357" width="0.2064%" height="15" fill="rgb(231,73,38)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="367.50"></text></g><g><title>[unknown] (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="341" width="0.2064%" height="15" fill="rgb(225,20,46)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="351.50"></text></g><g><title>[unknown] (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="325" width="0.2064%" height="15" fill="rgb(210,31,41)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="335.50"></text></g><g><title>[unknown] (6,455,881 samples, 0.21%)</title><rect x="0.2755%" y="309" width="0.2064%" height="15" fill="rgb(221,200,47)" fg:x="8617602" fg:w="6455881"/><text x="0.5255%" y="319.50"></text></g><g><title>[unknown] (3,162,044 samples, 0.10%)</title><rect x="0.3808%" y="293" width="0.1011%" height="15" fill="rgb(226,26,5)" fg:x="11911439" fg:w="3162044"/><text x="0.6308%" y="303.50"></text></g><g><title>[unknown] (3,162,044 samples, 0.10%)</title><rect x="0.3808%" y="277" width="0.1011%" height="15" fill="rgb(249,33,26)" fg:x="11911439" fg:w="3162044"/><text x="0.6308%" y="287.50"></text></g><g><title>[unknown] (3,162,044 samples, 0.10%)</title><rect x="0.3808%" y="261" width="0.1011%" height="15" fill="rgb(235,183,28)" fg:x="11911439" fg:w="3162044"/><text x="0.6308%" y="271.50"></text></g><g><title>[unknown] (3,162,044 samples, 0.10%)</title><rect x="0.3808%" y="245" width="0.1011%" height="15" fill="rgb(221,5,38)" fg:x="11911439" fg:w="3162044"/><text x="0.6308%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3,823,665 samples, 0.12%)</title><rect x="5.8678%" y="325" width="0.1222%" height="15" fill="rgb(247,18,42)" fg:x="183565238" fg:w="3823665"/><text x="6.1178%" y="335.50"></text></g><g><title>ashtl::alg::ntt::intt::_{{closure}} (3,823,665 samples, 0.12%)</title><rect x="5.8678%" y="309" width="0.1222%" height="15" fill="rgb(241,131,45)" fg:x="183565238" fg:w="3823665"/><text x="6.1178%" y="319.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::intt (175,837,637 samples, 5.62%)</title><rect x="0.4917%" y="357" width="5.6208%" height="15" fill="rgb(249,31,29)" fg:x="15382540" fg:w="175837637"/><text x="0.7417%" y="367.50">ashtl::..</text></g><g><title>ashtl::alg::ntt::intt (175,837,637 samples, 5.62%)</title><rect x="0.4917%" y="341" width="5.6208%" height="15" fill="rgb(225,111,53)" fg:x="15382540" fg:w="175837637"/><text x="0.7417%" y="351.50">ashtl::..</text></g><g><title>alloc::vec::from_elem (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="325" width="0.1225%" height="15" fill="rgb(238,160,17)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="309" width="0.1225%" height="15" fill="rgb(214,148,48)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="293" width="0.1225%" height="15" fill="rgb(232,36,49)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="277" width="0.1225%" height="15" fill="rgb(209,103,24)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="261" width="0.1225%" height="15" fill="rgb(229,88,8)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="245" width="0.1225%" height="15" fill="rgb(213,181,19)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="229" width="0.1225%" height="15" fill="rgb(254,191,54)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="213" width="0.1225%" height="15" fill="rgb(241,83,37)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="223.50"></text></g><g><title>[libc.so.6] (3,831,274 samples, 0.12%)</title><rect x="5.9901%" y="197" width="0.1225%" height="15" fill="rgb(233,36,39)" fg:x="187388903" fg:w="3831274"/><text x="6.2401%" y="207.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,826,684 samples, 0.12%)</title><rect x="6.1125%" y="325" width="0.1223%" height="15" fill="rgb(226,3,54)" fg:x="191220177" fg:w="3826684"/><text x="6.3625%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,826,684 samples, 0.12%)</title><rect x="6.1125%" y="309" width="0.1223%" height="15" fill="rgb(245,192,40)" fg:x="191220177" fg:w="3826684"/><text x="6.3625%" y="319.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize (11,483,276 samples, 0.37%)</title><rect x="6.1125%" y="357" width="0.3671%" height="15" fill="rgb(238,167,29)" fg:x="191220177" fg:w="11483276"/><text x="6.3625%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (11,483,276 samples, 0.37%)</title><rect x="6.1125%" y="341" width="0.3671%" height="15" fill="rgb(232,182,51)" fg:x="191220177" fg:w="11483276"/><text x="6.3625%" y="351.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize::_{{closure}} (7,656,592 samples, 0.24%)</title><rect x="6.2349%" y="325" width="0.2448%" height="15" fill="rgb(231,60,39)" fg:x="195046861" fg:w="7656592"/><text x="6.4849%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,540,952 samples, 0.24%)</title><rect x="31.8249%" y="325" width="0.2411%" height="15" fill="rgb(208,69,12)" fg:x="995586513" fg:w="7540952"/><text x="32.0749%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,540,952 samples, 0.24%)</title><rect x="31.8249%" y="309" width="0.2411%" height="15" fill="rgb(235,93,37)" fg:x="995586513" fg:w="7540952"/><text x="32.0749%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,540,952 samples, 0.24%)</title><rect x="31.8249%" y="293" width="0.2411%" height="15" fill="rgb(213,116,39)" fg:x="995586513" fg:w="7540952"/><text x="32.0749%" y="303.50"></text></g><g><title>[unknown] (4,434,989 samples, 0.14%)</title><rect x="32.0660%" y="325" width="0.1418%" height="15" fill="rgb(222,207,29)" fg:x="1003127465" fg:w="4434989"/><text x="32.3160%" y="335.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="309" width="0.0195%" height="15" fill="rgb(206,96,30)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="319.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="293" width="0.0195%" height="15" fill="rgb(218,138,4)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="303.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="277" width="0.0195%" height="15" fill="rgb(250,191,14)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="287.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="261" width="0.0195%" height="15" fill="rgb(239,60,40)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="271.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="245" width="0.0195%" height="15" fill="rgb(206,27,48)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="255.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="229" width="0.0195%" height="15" fill="rgb(225,35,8)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="239.50"></text></g><g><title>[unknown] (608,760 samples, 0.02%)</title><rect x="32.1883%" y="213" width="0.0195%" height="15" fill="rgb(250,213,24)" fg:x="1006953694" fg:w="608760"/><text x="32.4383%" y="223.50"></text></g><g><title>[unknown] (608,759 samples, 0.02%)</title><rect x="32.1883%" y="197" width="0.0195%" height="15" fill="rgb(247,123,22)" fg:x="1006953695" fg:w="608759"/><text x="32.4383%" y="207.50"></text></g><g><title>[unknown] (608,759 samples, 0.02%)</title><rect x="32.1883%" y="181" width="0.0195%" height="15" fill="rgb(231,138,38)" fg:x="1006953695" fg:w="608759"/><text x="32.4383%" y="191.50"></text></g><g><title>[unknown] (608,759 samples, 0.02%)</title><rect x="32.1883%" y="165" width="0.0195%" height="15" fill="rgb(231,145,46)" fg:x="1006953695" fg:w="608759"/><text x="32.4383%" y="175.50"></text></g><g><title>[unknown] (608,759 samples, 0.02%)</title><rect x="32.1883%" y="149" width="0.0195%" height="15" fill="rgb(251,118,11)" fg:x="1006953695" fg:w="608759"/><text x="32.4383%" y="159.50"></text></g><g><title>alloc::vec::from_elem (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="325" width="0.2447%" height="15" fill="rgb(217,147,25)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="309" width="0.2447%" height="15" fill="rgb(247,81,37)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="293" width="0.2447%" height="15" fill="rgb(209,12,38)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="277" width="0.2447%" height="15" fill="rgb(227,1,9)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="261" width="0.2447%" height="15" fill="rgb(248,47,43)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="245" width="0.2447%" height="15" fill="rgb(221,10,30)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="229" width="0.2447%" height="15" fill="rgb(210,229,1)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="213" width="0.2447%" height="15" fill="rgb(222,148,37)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="223.50"></text></g><g><title>[libc.so.6] (7,654,230 samples, 0.24%)</title><rect x="32.2078%" y="197" width="0.2447%" height="15" fill="rgb(234,67,33)" fg:x="1007562454" fg:w="7654230"/><text x="32.4578%" y="207.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt (864,523,122 samples, 27.64%)</title><rect x="6.4796%" y="357" width="27.6354%" height="15" fill="rgb(247,98,35)" fg:x="202703453" fg:w="864523122"/><text x="6.7296%" y="367.50">ashtl::alg::poly::Poly&lt;_&gt;::ntt</text></g><g><title>ashtl::alg::ntt::ntt (864,523,122 samples, 27.64%)</title><rect x="6.4796%" y="341" width="27.6354%" height="15" fill="rgb(247,138,52)" fg:x="202703453" fg:w="864523122"/><text x="6.7296%" y="351.50">ashtl::alg::ntt::ntt</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (52,009,891 samples, 1.66%)</title><rect x="32.4524%" y="325" width="1.6625%" height="15" fill="rgb(213,79,30)" fg:x="1015216684" fg:w="52009891"/><text x="32.7024%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (52,009,891 samples, 1.66%)</title><rect x="32.4524%" y="309" width="1.6625%" height="15" fill="rgb(246,177,23)" fg:x="1015216684" fg:w="52009891"/><text x="32.7024%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (52,009,891 samples, 1.66%)</title><rect x="32.4524%" y="293" width="1.6625%" height="15" fill="rgb(230,62,27)" fg:x="1015216684" fg:w="52009891"/><text x="32.7024%" y="303.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_even (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="357" width="0.8559%" height="15" fill="rgb(216,154,8)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="341" width="0.8559%" height="15" fill="rgb(244,35,45)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="325" width="0.8559%" height="15" fill="rgb(251,115,12)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="309" width="0.8559%" height="15" fill="rgb(240,54,50)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="293" width="0.8559%" height="15" fill="rgb(233,84,52)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="277" width="0.8559%" height="15" fill="rgb(207,117,47)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="261" width="0.8559%" height="15" fill="rgb(249,43,39)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="245" width="0.8559%" height="15" fill="rgb(209,38,44)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="229" width="0.8559%" height="15" fill="rgb(236,212,23)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="213" width="0.8559%" height="15" fill="rgb(242,79,21)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="197" width="0.8559%" height="15" fill="rgb(211,96,35)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="181" width="0.8559%" height="15" fill="rgb(253,215,40)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="191.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_even::_{{closure}} (26,774,221 samples, 0.86%)</title><rect x="34.1150%" y="165" width="0.8559%" height="15" fill="rgb(211,81,21)" fg:x="1067226575" fg:w="26774221"/><text x="34.3650%" y="175.50"></text></g><g><title>&lt;&amp;i64 as core::ops::arith::Mul&gt;::mul (3,823,943 samples, 0.12%)</title><rect x="34.8486%" y="149" width="0.1222%" height="15" fill="rgb(208,190,38)" fg:x="1090176853" fg:w="3823943"/><text x="35.0986%" y="159.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::resize (3,974,923 samples, 0.13%)</title><rect x="34.9708%" y="357" width="0.1271%" height="15" fill="rgb(235,213,38)" fg:x="1094000796" fg:w="3974923"/><text x="35.2208%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3,974,923 samples, 0.13%)</title><rect x="34.9708%" y="341" width="0.1271%" height="15" fill="rgb(237,122,38)" fg:x="1094000796" fg:w="3974923"/><text x="35.2208%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,974,923 samples, 0.13%)</title><rect x="34.9708%" y="325" width="0.1271%" height="15" fill="rgb(244,218,35)" fg:x="1094000796" fg:w="3974923"/><text x="35.2208%" y="335.50"></text></g><g><title>core::ptr::write (3,974,923 samples, 0.13%)</title><rect x="34.9708%" y="309" width="0.1271%" height="15" fill="rgb(240,68,47)" fg:x="1094000796" fg:w="3974923"/><text x="35.2208%" y="319.50"></text></g><g><title>[libc.so.6] (3,974,923 samples, 0.13%)</title><rect x="34.9708%" y="293" width="0.1271%" height="15" fill="rgb(210,16,53)" fg:x="1094000796" fg:w="3974923"/><text x="35.2208%" y="303.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="277" width="0.0198%" height="15" fill="rgb(235,124,12)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="287.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="261" width="0.0198%" height="15" fill="rgb(224,169,11)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="271.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="245" width="0.0198%" height="15" fill="rgb(250,166,2)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="255.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="229" width="0.0198%" height="15" fill="rgb(242,216,29)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="239.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="213" width="0.0198%" height="15" fill="rgb(230,116,27)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="223.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="197" width="0.0198%" height="15" fill="rgb(228,99,48)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="207.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="181" width="0.0198%" height="15" fill="rgb(253,11,6)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="191.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="165" width="0.0198%" height="15" fill="rgb(247,143,39)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="175.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="149" width="0.0198%" height="15" fill="rgb(236,97,10)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="159.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="133" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="143.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="117" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="127.50"></text></g><g><title>[unknown] (619,824 samples, 0.02%)</title><rect x="35.0781%" y="101" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="1097355895" fg:w="619824"/><text x="35.3281%" y="111.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::mul_even (1,086,139,647 samples, 34.72%)</title><rect x="0.4917%" y="373" width="34.7196%" height="15" fill="rgb(242,17,10)" fg:x="15382540" fg:w="1086139647"/><text x="0.7417%" y="383.50">ashtl::alg::poly::Poly&lt;_&gt;::mul_even</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::truncate_deg_or_0 (3,546,468 samples, 0.11%)</title><rect x="35.0979%" y="357" width="0.1134%" height="15" fill="rgb(242,107,0)" fg:x="1097975719" fg:w="3546468"/><text x="35.3479%" y="367.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::deg_or_0 (3,546,468 samples, 0.11%)</title><rect x="35.0979%" y="341" width="0.1134%" height="15" fill="rgb(251,28,31)" fg:x="1097975719" fg:w="3546468"/><text x="35.3479%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,546,468 samples, 0.11%)</title><rect x="35.0979%" y="325" width="0.1134%" height="15" fill="rgb(233,223,10)" fg:x="1097975719" fg:w="3546468"/><text x="35.3479%" y="335.50"></text></g><g><title>alloc::vec::from_elem (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="325" width="0.1168%" height="15" fill="rgb(215,21,27)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="309" width="0.1168%" height="15" fill="rgb(232,23,21)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="293" width="0.1168%" height="15" fill="rgb(244,5,23)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="277" width="0.1168%" height="15" fill="rgb(226,81,46)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="261" width="0.1168%" height="15" fill="rgb(247,70,30)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="245" width="0.1168%" height="15" fill="rgb(212,68,19)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="229" width="0.1168%" height="15" fill="rgb(240,187,13)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="213" width="0.1168%" height="15" fill="rgb(223,113,26)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="223.50"></text></g><g><title>[libc.so.6] (3,655,120 samples, 0.12%)</title><rect x="36.6559%" y="197" width="0.1168%" height="15" fill="rgb(206,192,2)" fg:x="1146715262" fg:w="3655120"/><text x="36.9059%" y="207.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::intt (52,670,503 samples, 1.68%)</title><rect x="35.2113%" y="357" width="1.6837%" height="15" fill="rgb(241,108,4)" fg:x="1101522187" fg:w="52670503"/><text x="35.4613%" y="367.50"></text></g><g><title>ashtl::alg::ntt::intt (52,670,503 samples, 1.68%)</title><rect x="35.2113%" y="341" width="1.6837%" height="15" fill="rgb(247,173,49)" fg:x="1101522187" fg:w="52670503"/><text x="35.4613%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,822,308 samples, 0.12%)</title><rect x="36.7728%" y="325" width="0.1222%" height="15" fill="rgb(224,114,35)" fg:x="1150370382" fg:w="3822308"/><text x="37.0228%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,822,308 samples, 0.12%)</title><rect x="36.7728%" y="309" width="0.1222%" height="15" fill="rgb(245,159,27)" fg:x="1150370382" fg:w="3822308"/><text x="37.0228%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,822,308 samples, 0.12%)</title><rect x="36.7728%" y="293" width="0.1222%" height="15" fill="rgb(245,172,44)" fg:x="1150370382" fg:w="3822308"/><text x="37.0228%" y="303.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize (3,824,264 samples, 0.12%)</title><rect x="36.8949%" y="357" width="0.1222%" height="15" fill="rgb(236,23,11)" fg:x="1154192690" fg:w="3824264"/><text x="37.1449%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3,824,264 samples, 0.12%)</title><rect x="36.8949%" y="341" width="0.1222%" height="15" fill="rgb(205,117,38)" fg:x="1154192690" fg:w="3824264"/><text x="37.1449%" y="351.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize::_{{closure}} (3,824,264 samples, 0.12%)</title><rect x="36.8949%" y="325" width="0.1222%" height="15" fill="rgb(237,72,25)" fg:x="1154192690" fg:w="3824264"/><text x="37.1449%" y="335.50"></text></g><g><title>&lt;ashtl::alg::poly::Poly&lt;_&gt; as core::clone::Clone&gt;::clone (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="341" width="0.1222%" height="15" fill="rgb(244,70,9)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="325" width="0.1222%" height="15" fill="rgb(217,125,39)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="309" width="0.1222%" height="15" fill="rgb(235,36,10)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="293" width="0.1222%" height="15" fill="rgb(251,123,47)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="277" width="0.1222%" height="15" fill="rgb(221,13,13)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="261" width="0.1222%" height="15" fill="rgb(238,131,9)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="271.50"></text></g><g><title>[libc.so.6] (3,822,380 samples, 0.12%)</title><rect x="37.0172%" y="245" width="0.1222%" height="15" fill="rgb(211,50,8)" fg:x="1158016954" fg:w="3822380"/><text x="37.2672%" y="255.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::mulx_a (15,048,126 samples, 0.48%)</title><rect x="37.1394%" y="325" width="0.4810%" height="15" fill="rgb(245,182,24)" fg:x="1161839334" fg:w="15048126"/><text x="37.3894%" y="335.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::extend_ntt (75,927,064 samples, 2.43%)</title><rect x="37.1394%" y="341" width="2.4271%" height="15" fill="rgb(242,14,37)" fg:x="1161839334" fg:w="75927064"/><text x="37.3894%" y="351.50">as..</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt (60,878,938 samples, 1.95%)</title><rect x="37.6204%" y="325" width="1.9461%" height="15" fill="rgb(246,228,12)" fg:x="1176887460" fg:w="60878938"/><text x="37.8704%" y="335.50">a..</text></g><g><title>ashtl::alg::ntt::ntt (60,878,938 samples, 1.95%)</title><rect x="37.6204%" y="309" width="1.9461%" height="15" fill="rgb(213,55,15)" fg:x="1176887460" fg:w="60878938"/><text x="37.8704%" y="319.50">a..</text></g><g><title>alloc::vec::from_elem (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="293" width="0.1223%" height="15" fill="rgb(209,9,3)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="277" width="0.1223%" height="15" fill="rgb(230,59,30)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="261" width="0.1223%" height="15" fill="rgb(209,121,21)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="245" width="0.1223%" height="15" fill="rgb(220,109,13)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="229" width="0.1223%" height="15" fill="rgb(232,18,1)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="213" width="0.1223%" height="15" fill="rgb(215,41,42)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="197" width="0.1223%" height="15" fill="rgb(224,123,36)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="207.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="181" width="0.1223%" height="15" fill="rgb(240,125,3)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="191.50"></text></g><g><title>[libc.so.6] (3,826,866 samples, 0.12%)</title><rect x="39.4441%" y="165" width="0.1223%" height="15" fill="rgb(205,98,50)" fg:x="1233939532" fg:w="3826866"/><text x="39.6941%" y="175.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::mul_neg_self_even (196,407,715 samples, 6.28%)</title><rect x="35.2113%" y="373" width="6.2784%" height="15" fill="rgb(205,185,37)" fg:x="1101522187" fg:w="196407715"/><text x="35.4613%" y="383.50">ashtl::a..</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_double (139,912,948 samples, 4.47%)</title><rect x="37.0172%" y="357" width="4.4725%" height="15" fill="rgb(238,207,15)" fg:x="1158016954" fg:w="139912948"/><text x="37.2672%" y="367.50">ashtl..</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt (60,163,504 samples, 1.92%)</title><rect x="39.5665%" y="341" width="1.9232%" height="15" fill="rgb(213,199,42)" fg:x="1237766398" fg:w="60163504"/><text x="39.8165%" y="351.50">a..</text></g><g><title>ashtl::alg::ntt::ntt (60,163,504 samples, 1.92%)</title><rect x="39.5665%" y="325" width="1.9232%" height="15" fill="rgb(235,201,11)" fg:x="1237766398" fg:w="60163504"/><text x="39.8165%" y="335.50">a..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,828,868 samples, 0.12%)</title><rect x="41.3672%" y="309" width="0.1224%" height="15" fill="rgb(207,46,11)" fg:x="1294101034" fg:w="3828868"/><text x="41.6172%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,828,868 samples, 0.12%)</title><rect x="41.3672%" y="293" width="0.1224%" height="15" fill="rgb(241,35,35)" fg:x="1294101034" fg:w="3828868"/><text x="41.6172%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,828,868 samples, 0.12%)</title><rect x="41.3672%" y="277" width="0.1224%" height="15" fill="rgb(243,32,47)" fg:x="1294101034" fg:w="3828868"/><text x="41.6172%" y="287.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::quo_xi (1,294,335,149 samples, 41.37%)</title><rect x="0.4818%" y="389" width="41.3747%" height="15" fill="rgb(247,202,23)" fg:x="15073483" fg:w="1294335149"/><text x="0.7318%" y="399.50">ashtl::alg::poly::Poly&lt;_&gt;::quo_xi</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::mul_odd (11,478,730 samples, 0.37%)</title><rect x="41.4896%" y="373" width="0.3669%" height="15" fill="rgb(219,102,11)" fg:x="1297929902" fg:w="11478730"/><text x="41.7396%" y="383.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::mul_even (11,478,730 samples, 0.37%)</title><rect x="41.4896%" y="357" width="0.3669%" height="15" fill="rgb(243,110,44)" fg:x="1297929902" fg:w="11478730"/><text x="41.7396%" y="367.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt (11,478,730 samples, 0.37%)</title><rect x="41.4896%" y="341" width="0.3669%" height="15" fill="rgb(222,74,54)" fg:x="1297929902" fg:w="11478730"/><text x="41.7396%" y="351.50"></text></g><g><title>ashtl::alg::ntt::ntt (11,478,730 samples, 0.37%)</title><rect x="41.4896%" y="325" width="0.3669%" height="15" fill="rgb(216,99,12)" fg:x="1297929902" fg:w="11478730"/><text x="41.7396%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,829,812 samples, 0.12%)</title><rect x="41.7341%" y="309" width="0.1224%" height="15" fill="rgb(226,22,26)" fg:x="1305578820" fg:w="3829812"/><text x="41.9841%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,829,812 samples, 0.12%)</title><rect x="41.7341%" y="293" width="0.1224%" height="15" fill="rgb(217,163,10)" fg:x="1305578820" fg:w="3829812"/><text x="41.9841%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,829,812 samples, 0.12%)</title><rect x="41.7341%" y="277" width="0.1224%" height="15" fill="rgb(213,25,53)" fg:x="1305578820" fg:w="3829812"/><text x="41.9841%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26,712,150 samples, 0.85%)</title><rect x="55.8080%" y="341" width="0.8539%" height="15" fill="rgb(252,105,26)" fg:x="1745853149" fg:w="26712150"/><text x="56.0580%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (26,712,150 samples, 0.85%)</title><rect x="55.8080%" y="325" width="0.8539%" height="15" fill="rgb(220,39,43)" fg:x="1745853149" fg:w="26712150"/><text x="56.0580%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26,712,150 samples, 0.85%)</title><rect x="55.8080%" y="309" width="0.8539%" height="15" fill="rgb(229,68,48)" fg:x="1745853149" fg:w="26712150"/><text x="56.0580%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11,478,790 samples, 0.37%)</title><rect x="56.6618%" y="341" width="0.3669%" height="15" fill="rgb(252,8,32)" fg:x="1772565299" fg:w="11478790"/><text x="56.9118%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11,478,790 samples, 0.37%)</title><rect x="56.6618%" y="325" width="0.3669%" height="15" fill="rgb(223,20,43)" fg:x="1772565299" fg:w="11478790"/><text x="56.9118%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11,478,790 samples, 0.37%)</title><rect x="56.6618%" y="309" width="0.3669%" height="15" fill="rgb(229,81,49)" fg:x="1772565299" fg:w="11478790"/><text x="56.9118%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (7,648,274 samples, 0.24%)</title><rect x="57.0288%" y="341" width="0.2445%" height="15" fill="rgb(236,28,36)" fg:x="1784044089" fg:w="7648274"/><text x="57.2788%" y="351.50"></text></g><g><title>ashtl::alg::ntt::intt::_{{closure}} (7,648,274 samples, 0.24%)</title><rect x="57.0288%" y="325" width="0.2445%" height="15" fill="rgb(249,185,26)" fg:x="1784044089" fg:w="7648274"/><text x="57.2788%" y="335.50"></text></g><g><title>alloc::vec::from_elem (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="341" width="0.3462%" height="15" fill="rgb(249,174,33)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="325" width="0.3462%" height="15" fill="rgb(233,201,37)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="309" width="0.3462%" height="15" fill="rgb(221,78,26)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="293" width="0.3462%" height="15" fill="rgb(250,127,30)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="277" width="0.3462%" height="15" fill="rgb(230,49,44)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="261" width="0.3462%" height="15" fill="rgb(229,67,23)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="245" width="0.3462%" height="15" fill="rgb(249,83,47)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="229" width="0.3462%" height="15" fill="rgb(215,43,3)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="239.50"></text></g><g><title>[libc.so.6] (10,829,484 samples, 0.35%)</title><rect x="57.2733%" y="213" width="0.3462%" height="15" fill="rgb(238,154,13)" fg:x="1791692363" fg:w="10829484"/><text x="57.5233%" y="223.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::intt (504,574,129 samples, 16.13%)</title><rect x="41.8566%" y="373" width="16.1292%" height="15" fill="rgb(219,56,2)" fg:x="1309408632" fg:w="504574129"/><text x="42.1066%" y="383.50">ashtl::alg::poly::Poly&lt;_&gt;..</text></g><g><title>ashtl::alg::ntt::intt (504,574,129 samples, 16.13%)</title><rect x="41.8566%" y="357" width="16.1292%" height="15" fill="rgb(233,0,4)" fg:x="1309408632" fg:w="504574129"/><text x="42.1066%" y="367.50">ashtl::alg::ntt::intt</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11,460,914 samples, 0.37%)</title><rect x="57.6194%" y="341" width="0.3664%" height="15" fill="rgb(235,30,7)" fg:x="1802521847" fg:w="11460914"/><text x="57.8694%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11,460,914 samples, 0.37%)</title><rect x="57.6194%" y="325" width="0.3664%" height="15" fill="rgb(250,79,13)" fg:x="1802521847" fg:w="11460914"/><text x="57.8694%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11,460,914 samples, 0.37%)</title><rect x="57.6194%" y="309" width="0.3664%" height="15" fill="rgb(211,146,34)" fg:x="1802521847" fg:w="11460914"/><text x="57.8694%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,646,706 samples, 0.24%)</title><rect x="57.9858%" y="341" width="0.2444%" height="15" fill="rgb(228,22,38)" fg:x="1813982761" fg:w="7646706"/><text x="58.2358%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,646,706 samples, 0.24%)</title><rect x="57.9858%" y="325" width="0.2444%" height="15" fill="rgb(235,168,5)" fg:x="1813982761" fg:w="7646706"/><text x="58.2358%" y="335.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize (22,938,653 samples, 0.73%)</title><rect x="57.9858%" y="373" width="0.7333%" height="15" fill="rgb(221,155,16)" fg:x="1813982761" fg:w="22938653"/><text x="58.2358%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (22,938,653 samples, 0.73%)</title><rect x="57.9858%" y="357" width="0.7333%" height="15" fill="rgb(215,215,53)" fg:x="1813982761" fg:w="22938653"/><text x="58.2358%" y="367.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::normalize::_{{closure}} (15,291,947 samples, 0.49%)</title><rect x="58.2302%" y="341" width="0.4888%" height="15" fill="rgb(223,4,10)" fg:x="1821629467" fg:w="15291947"/><text x="58.4802%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13,491,347 samples, 0.43%)</title><rect x="94.9546%" y="341" width="0.4313%" height="15" fill="rgb(234,103,6)" fg:x="2970484968" fg:w="13491347"/><text x="95.2046%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13,491,347 samples, 0.43%)</title><rect x="94.9546%" y="325" width="0.4313%" height="15" fill="rgb(227,97,0)" fg:x="2970484968" fg:w="13491347"/><text x="95.2046%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13,491,347 samples, 0.43%)</title><rect x="94.9546%" y="309" width="0.4313%" height="15" fill="rgb(234,150,53)" fg:x="2970484968" fg:w="13491347"/><text x="95.2046%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10,523,616 samples, 0.34%)</title><rect x="95.3858%" y="341" width="0.3364%" height="15" fill="rgb(228,201,54)" fg:x="2983976315" fg:w="10523616"/><text x="95.6358%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10,523,616 samples, 0.34%)</title><rect x="95.3858%" y="325" width="0.3364%" height="15" fill="rgb(222,22,37)" fg:x="2983976315" fg:w="10523616"/><text x="95.6358%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10,523,616 samples, 0.34%)</title><rect x="95.3858%" y="309" width="0.3364%" height="15" fill="rgb(237,53,32)" fg:x="2983976315" fg:w="10523616"/><text x="95.6358%" y="319.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="341" width="0.2103%" height="15" fill="rgb(233,25,53)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="351.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="325" width="0.2103%" height="15" fill="rgb(210,40,34)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="335.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="309" width="0.2103%" height="15" fill="rgb(241,220,44)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="319.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="293" width="0.2103%" height="15" fill="rgb(235,28,35)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="303.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="277" width="0.2103%" height="15" fill="rgb(210,56,17)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="287.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="261" width="0.2103%" height="15" fill="rgb(224,130,29)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="271.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="245" width="0.2103%" height="15" fill="rgb(235,212,8)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="255.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="229" width="0.2103%" height="15" fill="rgb(223,33,50)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="239.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="213" width="0.2103%" height="15" fill="rgb(219,149,13)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="223.50"></text></g><g><title>[unknown] (6,578,483 samples, 0.21%)</title><rect x="95.7222%" y="197" width="0.2103%" height="15" fill="rgb(250,156,29)" fg:x="2994499931" fg:w="6578483"/><text x="95.9722%" y="207.50"></text></g><g><title>[unknown] (3,507,435 samples, 0.11%)</title><rect x="95.8204%" y="181" width="0.1121%" height="15" fill="rgb(216,193,19)" fg:x="2997570979" fg:w="3507435"/><text x="96.0704%" y="191.50"></text></g><g><title>[unknown] (3,507,435 samples, 0.11%)</title><rect x="95.8204%" y="165" width="0.1121%" height="15" fill="rgb(216,135,14)" fg:x="2997570979" fg:w="3507435"/><text x="96.0704%" y="175.50"></text></g><g><title>alloc::vec::from_elem (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="341" width="0.3666%" height="15" fill="rgb(241,47,5)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="325" width="0.3666%" height="15" fill="rgb(233,42,35)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="309" width="0.3666%" height="15" fill="rgb(231,13,6)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="293" width="0.3666%" height="15" fill="rgb(207,181,40)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="277" width="0.3666%" height="15" fill="rgb(254,173,49)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="261" width="0.3666%" height="15" fill="rgb(221,1,38)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="245" width="0.3666%" height="15" fill="rgb(206,124,46)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="229" width="0.3666%" height="15" fill="rgb(249,21,11)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="239.50"></text></g><g><title>[libc.so.6] (11,468,249 samples, 0.37%)</title><rect x="95.9325%" y="213" width="0.3666%" height="15" fill="rgb(222,201,40)" fg:x="3001078414" fg:w="11468249"/><text x="96.1825%" y="223.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt (1,212,847,619 samples, 38.77%)</title><rect x="58.7190%" y="373" width="38.7699%" height="15" fill="rgb(235,61,29)" fg:x="1836921414" fg:w="1212847619"/><text x="58.9690%" y="383.50">ashtl::alg::poly::Poly&lt;_&gt;::ntt</text></g><g><title>ashtl::alg::ntt::ntt (1,212,847,619 samples, 38.77%)</title><rect x="58.7190%" y="357" width="38.7699%" height="15" fill="rgb(219,207,3)" fg:x="1836921414" fg:w="1212847619"/><text x="58.9690%" y="367.50">ashtl::alg::ntt::ntt</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (37,222,370 samples, 1.19%)</title><rect x="96.2991%" y="341" width="1.1899%" height="15" fill="rgb(222,56,46)" fg:x="3012546663" fg:w="37222370"/><text x="96.5491%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (37,222,370 samples, 1.19%)</title><rect x="96.2991%" y="325" width="1.1899%" height="15" fill="rgb(239,76,54)" fg:x="3012546663" fg:w="37222370"/><text x="96.5491%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (37,222,370 samples, 1.19%)</title><rect x="96.2991%" y="309" width="1.1899%" height="15" fill="rgb(231,124,27)" fg:x="3012546663" fg:w="37222370"/><text x="96.5491%" y="319.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_even::_{{closure}} (22,951,919 samples, 0.73%)</title><rect x="97.4890%" y="181" width="0.7337%" height="15" fill="rgb(249,195,6)" fg:x="3049769033" fg:w="22951919"/><text x="97.7390%" y="191.50"></text></g><g><title>&lt;&amp;i64 as core::ops::arith::Mul&gt;::mul (3,824,919 samples, 0.12%)</title><rect x="98.1004%" y="165" width="0.1223%" height="15" fill="rgb(237,174,47)" fg:x="3068896033" fg:w="3824919"/><text x="98.3504%" y="175.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (3,824,919 samples, 0.12%)</title><rect x="98.1004%" y="149" width="0.1223%" height="15" fill="rgb(206,201,31)" fg:x="3068896033" fg:w="3824919"/><text x="98.3504%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (26,779,741 samples, 0.86%)</title><rect x="97.4890%" y="197" width="0.8560%" height="15" fill="rgb(231,57,52)" fg:x="3049769033" fg:w="26779741"/><text x="97.7390%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,827,822 samples, 0.12%)</title><rect x="98.2226%" y="181" width="0.1224%" height="15" fill="rgb(248,177,22)" fg:x="3072720952" fg:w="3827822"/><text x="98.4726%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,827,822 samples, 0.12%)</title><rect x="98.2226%" y="165" width="0.1224%" height="15" fill="rgb(215,211,37)" fg:x="3072720952" fg:w="3827822"/><text x="98.4726%" y="175.50"></text></g><g><title>core::ptr::write (3,827,822 samples, 0.12%)</title><rect x="98.2226%" y="149" width="0.1224%" height="15" fill="rgb(241,128,51)" fg:x="3072720952" fg:w="3827822"/><text x="98.4726%" y="159.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_even (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="373" width="1.2229%" height="15" fill="rgb(227,165,31)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="357" width="1.2229%" height="15" fill="rgb(228,167,24)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="341" width="1.2229%" height="15" fill="rgb(228,143,12)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="325" width="1.2229%" height="15" fill="rgb(249,149,8)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="309" width="1.2229%" height="15" fill="rgb(243,35,44)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="293" width="1.2229%" height="15" fill="rgb(246,89,9)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="277" width="1.2229%" height="15" fill="rgb(233,213,13)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="261" width="1.2229%" height="15" fill="rgb(233,141,41)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="245" width="1.2229%" height="15" fill="rgb(239,167,4)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="229" width="1.2229%" height="15" fill="rgb(209,217,16)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (38,255,941 samples, 1.22%)</title><rect x="97.4890%" y="213" width="1.2229%" height="15" fill="rgb(219,88,35)" fg:x="3049769033" fg:w="38255941"/><text x="97.7390%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11,476,200 samples, 0.37%)</title><rect x="98.3450%" y="197" width="0.3668%" height="15" fill="rgb(220,193,23)" fg:x="3076548774" fg:w="11476200"/><text x="98.5950%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11,476,200 samples, 0.37%)</title><rect x="98.3450%" y="181" width="0.3668%" height="15" fill="rgb(230,90,52)" fg:x="3076548774" fg:w="11476200"/><text x="98.5950%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11,476,200 samples, 0.37%)</title><rect x="98.3450%" y="165" width="0.3668%" height="15" fill="rgb(252,106,19)" fg:x="3076548774" fg:w="11476200"/><text x="98.5950%" y="175.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_neg_self_even::_{{closure}} (3,454,890 samples, 0.11%)</title><rect x="98.7118%" y="197" width="0.1104%" height="15" fill="rgb(206,74,20)" fg:x="3088024974" fg:w="3454890"/><text x="98.9618%" y="207.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::ntt_mul_neg_self_even (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="373" width="0.2329%" height="15" fill="rgb(230,138,44)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="357" width="0.2329%" height="15" fill="rgb(235,182,43)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="341" width="0.2329%" height="15" fill="rgb(242,16,51)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="325" width="0.2329%" height="15" fill="rgb(248,9,4)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="309" width="0.2329%" height="15" fill="rgb(210,31,22)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="293" width="0.2329%" height="15" fill="rgb(239,54,39)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="277" width="0.2329%" height="15" fill="rgb(230,99,41)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="261" width="0.2329%" height="15" fill="rgb(253,106,12)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="245" width="0.2329%" height="15" fill="rgb(213,46,41)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="229" width="0.2329%" height="15" fill="rgb(215,133,35)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7,285,801 samples, 0.23%)</title><rect x="98.7118%" y="213" width="0.2329%" height="15" fill="rgb(213,28,5)" fg:x="3088024974" fg:w="7285801"/><text x="98.9618%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="197" width="0.1225%" height="15" fill="rgb(215,77,49)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="181" width="0.1225%" height="15" fill="rgb(248,100,22)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="191.50"></text></g><g><title>core::ptr::write (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="165" width="0.1225%" height="15" fill="rgb(208,67,9)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="175.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="149" width="0.1225%" height="15" fill="rgb(219,133,21)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="159.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="133" width="0.1225%" height="15" fill="rgb(246,46,29)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="143.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="117" width="0.1225%" height="15" fill="rgb(246,185,52)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="127.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="101" width="0.1225%" height="15" fill="rgb(252,136,11)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="111.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="85" width="0.1225%" height="15" fill="rgb(219,138,53)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="95.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="69" width="0.1225%" height="15" fill="rgb(211,51,23)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="79.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="53" width="0.1225%" height="15" fill="rgb(247,221,28)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="63.50"></text></g><g><title>[unknown] (3,830,911 samples, 0.12%)</title><rect x="98.8223%" y="37" width="0.1225%" height="15" fill="rgb(251,222,45)" fg:x="3091479864" fg:w="3830911"/><text x="99.0723%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="325" width="0.3671%" height="15" fill="rgb(217,162,53)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="309" width="0.3671%" height="15" fill="rgb(229,93,14)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="293" width="0.3671%" height="15" fill="rgb(209,67,49)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="277" width="0.3671%" height="15" fill="rgb(213,87,29)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="261" width="0.3671%" height="15" fill="rgb(205,151,52)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="245" width="0.3671%" height="15" fill="rgb(253,215,39)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="229" width="0.3671%" height="15" fill="rgb(221,220,41)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="213" width="0.3671%" height="15" fill="rgb(218,133,21)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="223.50"></text></g><g><title>alloc::alloc::realloc (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="197" width="0.3671%" height="15" fill="rgb(221,193,43)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="207.50"></text></g><g><title>realloc (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="181" width="0.3671%" height="15" fill="rgb(240,128,52)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="191.50"></text></g><g><title>[libc.so.6] (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="165" width="0.3671%" height="15" fill="rgb(253,114,12)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="175.50"></text></g><g><title>[libc.so.6] (11,484,107 samples, 0.37%)</title><rect x="98.9447%" y="149" width="0.3671%" height="15" fill="rgb(215,223,47)" fg:x="3095310775" fg:w="11484107"/><text x="99.1947%" y="159.50"></text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::quo_xi_new (1,801,211,594 samples, 57.58%)</title><rect x="41.8566%" y="389" width="57.5775%" height="15" fill="rgb(248,225,23)" fg:x="1309408632" fg:w="1801211594"/><text x="42.1066%" y="399.50">ashtl::alg::poly::Poly&lt;_&gt;::quo_xi_new</text></g><g><title>ashtl::alg::poly::Poly&lt;_&gt;::resize (15,309,451 samples, 0.49%)</title><rect x="98.9447%" y="373" width="0.4894%" height="15" fill="rgb(250,108,0)" fg:x="3095310775" fg:w="15309451"/><text x="99.1947%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (15,309,451 samples, 0.49%)</title><rect x="98.9447%" y="357" width="0.4894%" height="15" fill="rgb(228,208,7)" fg:x="3095310775" fg:w="15309451"/><text x="99.1947%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15,309,451 samples, 0.49%)</title><rect x="98.9447%" y="341" width="0.4894%" height="15" fill="rgb(244,45,10)" fg:x="3095310775" fg:w="15309451"/><text x="99.1947%" y="351.50"></text></g><g><title>core::ptr::write (3,825,344 samples, 0.12%)</title><rect x="99.3118%" y="325" width="0.1223%" height="15" fill="rgb(207,125,25)" fg:x="3106794882" fg:w="3825344"/><text x="99.5618%" y="335.50"></text></g><g><title>[libc.so.6] (3,825,344 samples, 0.12%)</title><rect x="99.3118%" y="309" width="0.1223%" height="15" fill="rgb(210,195,18)" fg:x="3106794882" fg:w="3825344"/><text x="99.5618%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distr::uniform::SampleRange&lt;T&gt;&gt;::is_empty (2,665,672 samples, 0.09%)</title><rect x="99.5236%" y="373" width="0.0852%" height="15" fill="rgb(249,80,12)" fg:x="3113418717" fg:w="2665672"/><text x="99.7736%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::lt (2,665,672 samples, 0.09%)</title><rect x="99.5236%" y="357" width="0.0852%" height="15" fill="rgb(221,65,9)" fg:x="3113418717" fg:w="2665672"/><text x="99.7736%" y="367.50"></text></g><g><title>&lt;u64 as rand::distr::utils::WideningMultiply&gt;::wmul (3,155,142 samples, 0.10%)</title><rect x="99.6088%" y="325" width="0.1009%" height="15" fill="rgb(235,49,36)" fg:x="3116084389" fg:w="3155142"/><text x="99.8588%" y="335.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (1,895,552 samples, 0.06%)</title><rect x="99.7096%" y="117" width="0.0606%" height="15" fill="rgb(225,32,20)" fg:x="3119239531" fg:w="1895552"/><text x="99.9596%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (1,895,552 samples, 0.06%)</title><rect x="99.7096%" y="101" width="0.0606%" height="15" fill="rgb(215,141,46)" fg:x="3119239531" fg:w="1895552"/><text x="99.9596%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (1,895,552 samples, 0.06%)</title><rect x="99.7096%" y="85" width="0.0606%" height="15" fill="rgb(250,160,47)" fg:x="3119239531" fg:w="1895552"/><text x="99.9596%" y="95.50"></text></g><g><title>rand_chacha::guts::round (3,743,168 samples, 0.12%)</title><rect x="99.7096%" y="133" width="0.1197%" height="15" fill="rgb(216,222,40)" fg:x="3119239531" fg:w="3743168"/><text x="99.9596%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (1,847,616 samples, 0.06%)</title><rect x="99.7702%" y="117" width="0.0591%" height="15" fill="rgb(234,217,39)" fg:x="3121135083" fg:w="1847616"/><text x="100.0202%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (1,847,616 samples, 0.06%)</title><rect x="99.7702%" y="101" width="0.0591%" height="15" fill="rgb(207,178,40)" fg:x="3121135083" fg:w="1847616"/><text x="100.0202%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1,847,616 samples, 0.06%)</title><rect x="99.7702%" y="85" width="0.0591%" height="15" fill="rgb(221,136,13)" fg:x="3121135083" fg:w="1847616"/><text x="100.0202%" y="95.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (6,804,773 samples, 0.22%)</title><rect x="99.7096%" y="213" width="0.2175%" height="15" fill="rgb(249,199,10)" fg:x="3119239531" fg:w="6804773"/><text x="99.9596%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (6,804,773 samples, 0.22%)</title><rect x="99.7096%" y="197" width="0.2175%" height="15" fill="rgb(249,222,13)" fg:x="3119239531" fg:w="6804773"/><text x="99.9596%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6,804,773 samples, 0.22%)</title><rect x="99.7096%" y="181" width="0.2175%" height="15" fill="rgb(244,185,38)" fg:x="3119239531" fg:w="6804773"/><text x="99.9596%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (6,804,773 samples, 0.22%)</title><rect x="99.7096%" y="165" width="0.2175%" height="15" fill="rgb(236,202,9)" fg:x="3119239531" fg:w="6804773"/><text x="99.9596%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (6,804,773 samples, 0.22%)</title><rect x="99.7096%" y="149" width="0.2175%" height="15" fill="rgb(250,229,37)" fg:x="3119239531" fg:w="6804773"/><text x="99.9596%" y="159.50"></text></g><g><title>rand_chacha::guts::undiagonalize (3,061,605 samples, 0.10%)</title><rect x="99.8293%" y="133" width="0.0979%" height="15" fill="rgb(206,174,23)" fg:x="3122982699" fg:w="3061605"/><text x="100.0793%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (3,061,605 samples, 0.10%)</title><rect x="99.8293%" y="117" width="0.0979%" height="15" fill="rgb(211,33,43)" fg:x="3122982699" fg:w="3061605"/><text x="100.0793%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (3,061,605 samples, 0.10%)</title><rect x="99.8293%" y="101" width="0.0979%" height="15" fill="rgb(245,58,50)" fg:x="3122982699" fg:w="3061605"/><text x="100.0793%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3,061,605 samples, 0.10%)</title><rect x="99.8293%" y="85" width="0.0979%" height="15" fill="rgb(244,68,36)" fg:x="3122982699" fg:w="3061605"/><text x="100.0793%" y="95.50"></text></g><g><title>all (3,128,322,781 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="3128322781"/><text x="0.2500%" y="703.50"></text></g><g><title>ashtl (3,128,322,781 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="3128322781"/><text x="0.2500%" y="687.50">ashtl</text></g><g><title>_start (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="661" width="99.9405%" height="15" fill="rgb(235,160,14)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="671.50">_start</text></g><g><title>__libc_start_main (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="645" width="99.9405%" height="15" fill="rgb(212,155,44)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="629" width="99.9405%" height="15" fill="rgb(226,2,50)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="639.50">[libc.so.6]</text></g><g><title>main (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="613" width="99.9405%" height="15" fill="rgb(234,177,6)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="597" width="99.9405%" height="15" fill="rgb(217,24,9)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="581" width="99.9405%" height="15" fill="rgb(220,13,46)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="565" width="99.9405%" height="15" fill="rgb(239,221,27)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="575.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="549" width="99.9405%" height="15" fill="rgb(222,198,25)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="559.50">std::panicking::catch_unwind::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="533" width="99.9405%" height="15" fill="rgb(211,99,13)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="517" width="99.9405%" height="15" fill="rgb(232,111,31)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="501" width="99.9405%" height="15" fill="rgb(245,82,37)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="511.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="485" width="99.9405%" height="15" fill="rgb(227,149,46)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="495.50">std::panicking::catch_unwind::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="469" width="99.9405%" height="15" fill="rgb(218,36,50)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="453" width="99.9405%" height="15" fill="rgb(226,80,48)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="437" width="99.9405%" height="15" fill="rgb(238,224,15)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="421" width="99.9405%" height="15" fill="rgb(241,136,10)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>ashtl::main (3,126,462,546 samples, 99.94%)</title><rect x="0.0595%" y="405" width="99.9405%" height="15" fill="rgb(208,32,45)" fg:x="1860235" fg:w="3126462546"/><text x="0.3095%" y="415.50">ashtl::main</text></g><g><title>rand::rng::Rng::random_range (17,702,555 samples, 0.57%)</title><rect x="99.4341%" y="389" width="0.5659%" height="15" fill="rgb(207,135,9)" fg:x="3110620226" fg:w="17702555"/><text x="99.6841%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distr::uniform::SampleRange&lt;T&gt;&gt;::sample_single (12,238,392 samples, 0.39%)</title><rect x="99.6088%" y="373" width="0.3912%" height="15" fill="rgb(206,86,44)" fg:x="3116084389" fg:w="12238392"/><text x="99.8588%" y="383.50"></text></g><g><title>&lt;rand::distr::uniform::int::UniformInt&lt;u64&gt; as rand::distr::uniform::UniformSampler&gt;::sample_single (12,238,392 samples, 0.39%)</title><rect x="99.6088%" y="357" width="0.3912%" height="15" fill="rgb(245,177,15)" fg:x="3116084389" fg:w="12238392"/><text x="99.8588%" y="367.50"></text></g><g><title>&lt;rand::distr::uniform::int::UniformInt&lt;u64&gt; as rand::distr::uniform::UniformSampler&gt;::sample_single_inclusive (12,238,392 samples, 0.39%)</title><rect x="99.6088%" y="341" width="0.3912%" height="15" fill="rgb(206,64,50)" fg:x="3116084389" fg:w="12238392"/><text x="99.8588%" y="351.50"></text></g><g><title>rand::rng::Rng::random (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="325" width="0.2904%" height="15" fill="rgb(234,36,40)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="335.50"></text></g><g><title>rand::distr::integer::&lt;impl rand::distr::distribution::Distribution&lt;u64&gt; for rand::distr::StandardUniform&gt;::sample (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="309" width="0.2904%" height="15" fill="rgb(213,64,8)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="319.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="293" width="0.2904%" height="15" fill="rgb(210,75,36)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="303.50"></text></g><g><title>&lt;rand::rngs::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="277" width="0.2904%" height="15" fill="rgb(229,88,21)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="261" width="0.2904%" height="15" fill="rgb(252,204,47)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="271.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="245" width="0.2904%" height="15" fill="rgb(208,77,27)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="255.50"></text></g><g><title>&lt;rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (9,083,250 samples, 0.29%)</title><rect x="99.7096%" y="229" width="0.2904%" height="15" fill="rgb(221,76,26)" fg:x="3119239531" fg:w="9083250"/><text x="99.9596%" y="239.50"></text></g><g><title>rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="213" width="0.0728%" height="15" fill="rgb(225,139,18)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="223.50"></text></g><g><title>rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="197" width="0.0728%" height="15" fill="rgb(230,137,11)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="207.50"></text></g><g><title>rand_core::SeedableRng::try_from_rng (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="181" width="0.0728%" height="15" fill="rgb(212,28,1)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="191.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::TryRngCore&gt;::try_fill_bytes (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="165" width="0.0728%" height="15" fill="rgb(248,164,17)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="175.50"></text></g><g><title>getrandom::fill (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="149" width="0.0728%" height="15" fill="rgb(222,171,42)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="159.50"></text></g><g><title>getrandom::fill_uninit (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="133" width="0.0728%" height="15" fill="rgb(243,84,45)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="143.50"></text></g><g><title>getrandom::backends::linux_android_with_fallback::fill_inner (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="117" width="0.0728%" height="15" fill="rgb(252,49,23)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="127.50"></text></g><g><title>getrandom::backends::use_file::util_libc::sys_fill_exact (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="101" width="0.0728%" height="15" fill="rgb(215,19,7)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="111.50"></text></g><g><title>getrandom::backends::linux_android_with_fallback::fill_inner::_{{closure}} (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="85" width="0.0728%" height="15" fill="rgb(238,81,41)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="95.50"></text></g><g><title>[libc.so.6] (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="69" width="0.0728%" height="15" fill="rgb(210,199,37)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="79.50"></text></g><g><title>[[vdso]] (2,278,477 samples, 0.07%)</title><rect x="99.9272%" y="53" width="0.0728%" height="15" fill="rgb(244,192,49)" fg:x="3126044304" fg:w="2278477"/><text x="100.1772%" y="63.50"></text></g></svg></svg>